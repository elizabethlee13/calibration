import cv2
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

#applies canny edge


img1 = cv2.imread('rgb_1.png')
img2 = cv2.imread('rgb_2.png')

newimg = img2 - img1
img_shape = newimg.shape



factor = 0.75
img3 =  cv2.resize(newimg, (int(img_shape[1] * factor), int(img_shape[0] * factor)))
cv2.imshow('subtracted.png', img3)
cv2.imwrite('subtracted.png', img3)



img8 = (newimg.astype('uint8'))

edges = cv2.Canny(newimg,200,255,L2gradient=False)
cv2.imshow('Canny edge ', edges)
cv2.imwrite('cannyedge.png', edges)


#obtains corner coordinates
img = cv2.imread('cannyedge.png')

gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

gray = np.float32(gray)
dst = cv2.cornerHarris(gray,2,3,0.04)

ret, dst = cv2.threshold(dst,0.1*dst.max(),255,0)
dst = np.uint8(dst)
ret, labels, stats, centroids = cv2.connectedComponentsWithStats(dst)
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)
corners = cv2.cornerSubPix(gray,np.float32(centroids),(5,5),(-1,-1),criteria)

xval = []
yval = []
#only prints the outer corner coordinates that should be taken into consideration
for i in range(1, len(corners)):
    xval.append(corners[i][0])
    yval.append(corners[i][1])
    
xval.sort()
yval.sort()

xmin = xval[0]
xmax = xval[-1]
ymin = yval[0]
ymax = yval[-1]


#obtain width of frame using corner coordinates
width = xmax - xmin
print(width)

#obtain height of frame using corner coordinates
height = ymax - ymin
print(height)
    
img[dst>0.1*dst.max()]=[0,0,255]
cv2.imshow('image', img)
cv2.imwrite("cornersmarked.png", img)
cv2.waitKey(0)
cv2.destroyAllWindows


#resize image to fit into frame

image  = Image.open('rgb_2.png')
imgcrop = image.crop((xmin, ymin, xmax, ymax))
imgcrop.show()
